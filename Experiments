                                                              EX-1a

EXP 1 a
#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <cmath>
#include <sstream>

using namespace std;

bool isOp(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

int Prec(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

double applyOp(double a, double b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') return a / b;
    return pow(a, b);
}

string toPostFix(const string& expr) {
    stack<char> ops;
    string post;
    string num;

    for (char c : expr) {
        if (isdigit(c) || c == '.') {
            num += c;
        } else {
            if (!num.empty()) {
                post += num + " ";
                num.clear();
            }
            if (c == '(') {
                ops.push(c);
            }
            else if (c == ')') {
                while (!ops.empty() && ops.top() != '(') {
                    post += ops.top();
                    post += " ";
                    ops.pop();
                }
                ops.pop();
            }
            else if (isOp(c)) {
                while (!ops.empty() && Prec(ops.top()) >= Prec(c)) {
                    post += ops.top();
                    post += " ";
                    ops.pop();
                }
                ops.push(c);
            }
        }
    }
    if (!num.empty()) {
        post += num + " ";
    }
    while (!ops.empty()) {
        post += ops.top();
        post += " ";
        ops.pop();
    }

    return post;
}

double evalPost(const string& post) {
    stack<double> vals;
    stringstream ss(post);
    string tok;

    while (ss >> tok) {
        if (isdigit(tok[0]) || (tok[0] == '-' && tok.length() > 1)) {
            vals.push(stod(tok));
        } else {
            double b = vals.top(); vals.pop();
            double a = vals.top(); vals.pop();
            vals.push(applyOp(a, b, tok[0]));
        }
    }

    return vals.top();
}

bool isBal(const string& expr) {
    int bal = 0;
    for (char c : expr) {
        if (c == '(') bal++;
        else if (c == ')') {
            if (bal == 0) return false;
            bal--;
        }
    }
    return bal == 0;
}

int main() {
    string in;
    cout << "Enter expression: ";
    while (getline(cin, in)) {
        if (!isBal(in)) {
            cout << "Error: Unbalanced parentheses" << "\n";
        } else {
            try {
                string post = toPostFix(in);
                cout << "Postfix: " << post << "\n";
                cout << "Result: " << evalPost(post) << "\n";
            } catch (...) {
                cout << "Invalid expression" << "\n";
            }
        }
    }
    return 0;
}

                                                                 Ex-1b

                     Lex code to count total number of characters
%{
    int count = 0;
%}

%%
. { count++; }
\n { count++; }

%%
int main()
{
    yylex();
    printf("Total number of characters: %d\n", count);
    return 0;
}


int yywrap(){return 1;

                      Lex Program to count number of words
%{
    int word_count = 0;
%}

%%
[a-zA-Z0-9]+ { word_count++; }

%%
int main()
{
    yylex();
    printf("Number of words: %d\n", word_count);
    return 0;
}

                            Lex Program to Count Lines, Spaces and Tabs
%{
    int line_count = 0;
    int space_count = 0;
    int tab_count = 0;
%}

%%
\n      { line_count++; }
" "     { space_count++; }
\t      { tab_count++; }
.       { }

%%
int main()
{
    yylex();
    printf("Number of lines: %d\n", line_count);
    printf("Number of spaces: %d\n", space_count);
    printf("Number of tabs: %d\n", tab_count);
    return 0;
}

                           Lex Program to Count Frequency of a Given Word
%{
    #include <string.h>
    int count = 0;
    char word[100];
%}

%%
[a-zA-Z0-9]+ {
    if(strcmp(yytext, word) == 0)
        count++;
}
.|\n    {}

%%
int main(int argc, char *argv[])
{
    if(argc != 2) {
        printf("Usage: %s word\n", argv[0]);
        return 1;
    }
    
    strcpy(word, argv[1]);
    yylex();
    printf("Frequency of the word '%s': %d\n", word, count);
    return 0;
}

                                Lex Program to Add Line Numbers to a File
%{
    int line_num = 1;
%}

%%
^(.*)$  { printf("%d\t%s\n", line_num++, yytext); }

%%
int main()
{
    yylex();
    return 0;
}

                         EXP 2:
%{
%}

%%

"int" {printf("A Keyword: %s\n", yytext);}
"main" {printf("A Keyword: %s\n", yytext);}
"return" {printf("A Keyword: %s\n", yytext);}
"float" {printf("A Keyword: %s\n", yytext);}
"cout" {printf("A Keyword: %s\n", yytext);}
"cin" {printf("A Keyword: %s\n", yytext);}
"namespace" {printf("A Keyword: %s\n", yytext);}
"using" {printf("A Keyword: %s\n", yytext);}
"std" {printf("A Keyword: %s\n", yytext);}
"#include" {printf("A Preprocessor Directive: %s\n", yytext);}

[a-zA-Z_][a-zA-Z0-9_]* {printf("An identifier: %s\n", yytext);}
[0-9]+ {printf("A integer: %s\n", yytext);}

"=" {printf("An operator: %s\n", yytext);}
";" {printf("special Symbol: %s\n", yytext);}
"," {printf("special Symbol: %s\n", yytext);}
"(" {printf("special Symbol: %s\n", yytext);}
")" {printf("special Symbol: %s\n", yytext);}
"{" {printf("special Symbol: %s\n", yytext);}
"}" {printf("special Symbol: %s\n", yytext);}
"<<" {printf("An operator: %s\n", yytext);}
">>" {printf("An operator: %s\n", yytext);}
"<" {printf("special Symbol: %s\n", yytext);}
">" {printf("special Symbol: %s\n", yytext);}
"/" {printf("An operator: %s\n", yytext);}
"+" {printf("An operator: %s\n", yytext);}
"-" {printf("An operator: %s\n", yytext);}
"*" {printf("An operator: %s\n", yytext);}
"\"" {printf("Special Character: %s\n", yytext);}

"\"[^\"]*\"" {printf("A string literal: %s\n", yytext);}

[ \t\n\r]+ ;
. {printf("Unrecognized: %s\n", yytext);}  

%%

int main() {
    char filename[256];
    printf("Enter the filename: ");
    scanf("%s", filename);

    FILE *file = fopen(filename, "r");
    if (!file) {
        printf("Error opening file: %s\n", filename);
        return 1;
    }

    yyin = file;
    yylex();
    fclose(file);
   
    return 0;
}

int yywrap() {
    return 1;
}

             EXP 3:

      calc.l
%{
#include "calc.tab.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>  // Include math library for functions like sin, cos, etc.
%}

%%

[0-9]+    { yylval.num = atoi(yytext); return NUMBER; }
"sin"     { return SIN; }
"cos"     { return COS; }
"tan"     { return TAN; }
"log"     { return LOG; }
"+"       { return '+'; }
"-"       { return '-'; }
"*"       { return '*'; }
"/"       { return '/'; }
"("       { return '('; }
")"       { return ')'; }
\n        { return '\n'; }
[ \t]     { /* Ignore whitespace */ }
.         { printf("Invalid character: %s\n", yytext); }

%%

int yywrap() { return 1; }


          calc.y
%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>  // Include math library for trigonometric functions

extern int yylex();  // Declare the lexer function
void yyerror(const char *s);  // Error handling function

%}

%union {
    int num;
}

%token <num> NUMBER
%token SIN COS TAN LOG
%type <num> expr

%left '+' '-'
%left '*' '/'
%right UMINUS

%%

input:
    /* Empty */
    | input line
    ;

line:
    expr '\n' { printf("Result: %d\n", $1); }
    ;

expr:
    NUMBER                { $$ = $1; }
    | expr '+' expr       { $$ = $1 + $3; }
    | expr '-' expr       { $$ = $1 - $3; }
    | expr '*' expr       { $$ = $1 * $3; }
    | expr '/' expr       {
                            if ($3 == 0) {
                                printf("Error: Division by zero!\n");
                                exit(1);
                            } else {
                                $$ = $1 / $3;
                            }
                          }
    | '(' expr ')'        { $$ = $2; }
    | '-' expr %prec UMINUS { $$ = -$2; }
    | SIN '(' expr ')'    { $$ = sin($3); }
    | COS '(' expr ')'    { $$ = cos($3); }
    | TAN '(' expr ')'    { $$ = tan($3); }
    | LOG '(' expr ')'    { $$ = log($3); }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Simple calculator (Type expressions and press Enter)\n");
    printf("Example: 3 + 5 * (2 - 1)\n");
    printf("press Ctrl+c to exit\n");
    return yyparse();
}

          HOW TO RUN THE CODES.
cd C:\win_flex_bison-2.5.25
C:\win_flex_bison-2.5.25>win_flex calc.l
C:\win_flex_bison-2.5.25>win_bison -d calc.y
C:\win_flex_bison-2.5.25>gcc -o xy lex.yy.c calc.tab.c
C:\win_flex_bison-2.5.25>xy

            EXP 4:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100

int main() {
    char input[SIZE][SIZE];
    char non_terminal;
    char alpha[SIZE][SIZE], beta[SIZE][SIZE];
    int numProductions = 0;

    printf("Enter productions (type 'END' to finish):\n");

    // Input multiple grammar rules
    while (1) {
        printf("Production %d: ", numProductions + 1);
        fgets(input[numProductions], SIZE, stdin);
        input[numProductions][strcspn(input[numProductions], "\n")] = '\0'; // Remove newline

        if (strcmp(input[numProductions], "END") == 0) break;
        numProductions++;
    }

    for (int rule = 0; rule < numProductions; rule++) {
        int alphaCount = 0, betaCount = 0, hasEpsilon = 0;
        non_terminal = input[rule][0];

        // Ensure valid format (A->...)
        char *productions = strchr(input[rule], '>');
        if (!productions || productions[1] == '\0') {
            printf("\nInvalid production format: %s\n", input[rule]);
            continue;
        }
        productions += 1; // Move past '>'

        // Tokenize the right-hand side
        char *token = strtok(productions, "|");
        while (token) {
            if (strcmp(token, "ε") == 0) {
                hasEpsilon = 1;
            } else if (token[0] == non_terminal) {
                strncpy(alpha[alphaCount++], token + 1, SIZE - 1);
            } else {
                strncpy(beta[betaCount++], token, SIZE - 1);
            }
            token = strtok(NULL, "|");
        }

        // Print modified grammar
        if (alphaCount > 0) {
            printf("\nGrammar Without Left Recursion for %c:\n", non_terminal);

            printf(" %c -> ", non_terminal);
            for (int i = 0; i < betaCount; i++) {
                printf("%s%c'%s", beta[i], non_terminal, (i < betaCount - 1) ? " | " : "");
            }
            if (hasEpsilon) printf(" | ε");
            printf("\n");

            printf(" %c' -> ", non_terminal);
            for (int i = 0; i < alphaCount; i++) {
                printf("%s%c'%s", alpha[i], non_terminal, (i < alphaCount - 1) ? " | " : "");
            }
            printf(" | ε\n");
        } else {
            printf("\nNo left recursion detected for %c.\n", non_terminal);
        }
    }

    return 0;
}



#include <stdio.h>
#include <string.h>

#define SIZE 100
#define MAX_PRODUCTIONS 10

void eliminateLeftFactoring(char non_terminal, char *production) {
    char part[MAX_PRODUCTIONS][SIZE], common[SIZE] = "", newGram[MAX_PRODUCTIONS][SIZE];
    int count = 0, pos = 0, hasEpsilon = 0;

    // Split production at '|'
    char *token = strtok(production, "|");
    while (token) {
        if (!strcmp(token, "ε")) hasEpsilon = 1;
        else strcpy(part[count++], token);
        token = strtok(NULL, "|");
    }

    if (count < 2) { // No left factoring needed
        printf("%c -> %s\n", non_terminal, production);
        return;
    }

    // Find common prefix
    while (pos < strlen(part[0])) {
        char c = part[0][pos];
        for (int i = 1; i < count; i++)
            if (part[i][pos] != c) goto stop;
        common[pos++] = c;
    }
stop:
    common[pos] = '\0';

    // Print factored grammar
    printf("%c -> %s%c'\n%c' -> ", non_terminal, common, non_terminal, non_terminal);
    int newCount = 0;
    for (int i = 0; i < count; i++)
        if (strlen(part[i]) > pos) printf("%s%s", newCount++ ? " | " : "", part[i] + pos);
   
    if (hasEpsilon || newCount == 0) printf(" | ε");
    printf("\n");
}

int main() {
    char input[MAX_PRODUCTIONS][SIZE];
    int numProductions = 0;

    printf("Enter productions (type 'END' to finish):\n");
    while (1) {
        printf("Production %d: ", numProductions + 1);
        fgets(input[numProductions], SIZE, stdin);
        input[numProductions][strcspn(input[numProductions], "\n")] = '\0';

        if (!strcmp(input[numProductions], "END")) break;
        numProductions++;
    }

    printf("\nGrammar Without Left Factoring:\n");
    for (int i = 0; i < numProductions; i++)
        eliminateLeftFactoring(input[i][0], strchr(input[i], '>') + 1);

    return 0;
}

            EXP 4 INPUTS:
LR
INPUT: E->E+T|T

LF
INPUT : bE+acF|bE+f
